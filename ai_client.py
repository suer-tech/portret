from typing import List, Dict

# Заглушка для вызова LLM (сюда можно подключить OpenAI / DeepSeek и т.п.)
def call_llm(prompt: str, history: List[Dict[str, str]]) -> str:
    return f"(ИИ ответ): {prompt}"


# ---- Определение стадии ----
def detect_stage(current_stage: str, history: List[Dict[str, str]], new_message: str) -> str:
    """
    Определение стадии по истории и новому сообщению.
    В реальном случае сюда подключается LLM для классификации.
    """
    return current_stage  # здесь оставляем как заглушку


# ---- Функции стадий ----
def handle_stage_primary(history, message: str) -> Dict:
    prompt = f"""Ты — Дмитрий - виртуальный менеджер студии портретов на холсте. 
                Ты общаешься с клиентом в чате на стадии "Приветственное сообщение".  
                
                ⚠️ Основная цель на этом этапе — получить фотографию от клиента.  
                Пока фото не получено, ты должен работать с любыми возражениями или вопросами 
                и мягко возвращать диалог к необходимости отправить фотографию.  
                
                Используй только заранее подготовленные скрипты. Ничего не перефразируй, не придумывай новое.  
                Выбирай вариант, который соответствует ситуации.  
                
                Скрипты:
                
                1. Если клиент прислал фотографию:
                "Здравствуйте, меня зовут Дмитрий, я старший менеджер, буду помогать Вам по всем вопросам. Для Вашей фотографии отлично подойдет стиль художественная живопись, с имитацией техники масляных мазков - спокойный лаконичный стиль.  
                Сейчас пришлю для Вас примеры наших актуальных работ, посмотрите, что больше понравится и уже определитесь финально, а также оцените детализацию и качество отрисовки, далее обязательно сориентирую Вас по стоимости и нашим размерам."
                
                2. Если клиент не прислал фотографию:
                "Здравствуйте, меня зовут Дмитрий, я старший менеджер, буду помогать Вам по всем вопросам. Для расчета по стоимости мне нужна Ваша фотография, чтобы подобрать для Вас стилистику. Наши художники рисуют на графических планшетах вручную, не используют обработку фильтрами и чтобы оценить масштаб работы мне нужна Ваша фотография. Сможете прислать в чат?"
                
                3. Если клиент сразу спрашивает цену:
                "Здравствуйте, меня зовут Дмитрий, я старший менеджер, буду помогать Вам по всем вопросам. С радостью сориентирую Вас по стоимости, но мне необходимо понимать масштаб работы, для этого мы запрашиваем фотографию, далее задам пару вопросов, это не займет более 5 минут и вышлю для Вас стоимость и размеры. Просто мы не используем обработку фильтрами, наши художники рисуют на графических планшетах, поэтому прайс сразу не высылается. Кого бы Вы хотели изобразить на портрете?"
                
                Формат ответа: JSON
                {
                  "reply": "Здравствуйте, меня зовут Дмитрий, я старший менеджер, буду помогать Вам по всем вопросам. Для расчета по стоимости мне нужна Ваша фотография, чтобы подобрать для Вас стилистику. Наши художники рисуют на графических планшетах вручную, не используют обработку фильтрами и чтобы оценить масштаб работы мне нужна Ваша фотография. Сможете прислать в чат?",
                  "selected_style": "художественная живопись"
                }
                
                Правила:
                - reply = текст для сообщения 
                - selected_style = один из художественных стилей
                          
                Вот история переписки:
                {history}
                ответь на последнее сообщение клиента: "{message}"
                """
    response = call_llm(prompt, history)
    return response


def handle_stage_style(history, message: str) -> Dict:
    prompt = f"""
            Ты — виртуальный менеджер художественной студии, ведущий диалог по выбору стиля портрета. 
            Твоя задача — профессионально и дружелюбно отвечать на вопросы клиента, мягко побуждать его выбрать один из предложенных стилей портрета. 
            Диалог продолжается, пока клиент явно не выбрал стиль (например, сказал названия стиля или согласился с предложением). 
            Если клиент выбрал стиль — обязательно подтвердить выбор и сообщить, что вы переходите к следующему этапу оформления заказа. 
            Если стиль не выбран — задавай уточняющие вопросы, обрабатывай возможные возражения или сомнения, помогай клиенту определиться.
            Ответы должен давать максимально информативные, уважительные и ориентированные на доверие.
            Вот история переписки:
            {history}
            ответь на последнее сообщение клиента: "{message}"
    """.format(history="\n".join([m["role"] + ": " + m["content"] for m in history]), message=message)

    response = call_llm(prompt, history)
    ready_to_next = "стиль" in message.lower() or any(keyword in message.lower() for keyword in ["выбрал", "подходит", "подошёл", "принимаю", "согласен", "нравится"])
    return {"reply": response, "ready_to_next": ready_to_next}




def handle_stage_city(history, message: str) -> Dict:
    prompt = f"""Ты — виртуальный менеджер студии портретов на холсте, ведёшь диалог с клиентом.
            Клиент просит ориентировочную цену.
            Твоя задача — профессионально и дружелюбно ответить, что для точного расчёта необходимы сведения о городе получения и дате.
            Объясни, что у нас есть срочное изготовление портретов с доплатой, а также более 50 мастерских по всей России.
            Уточни, в каком городе клиент планирует получение портрета и к какой дате.
            Если города клиента нет среди мастерских, сообщи о доступности пункта выдачи.
            
            Пример ответа:
            «Я с радостью Вас сориентирую, но мне также нужно понимать, в каком городе Вы планируете получение и к какой дате. 
            У нас есть срочное изготовление портретов с доплатой, о которой я бы сразу хотела Вас предупредить. 
            К тому же у нас более 50 мастерских по всей России, поэтому важно понять, будет ли получение в нашей мастерской или пункте выдачи.»
            
            Веди разговор так, чтобы получить эти данные от клиента.
            Ответь на последнее сообщение клиента исходя из истории переписки и вопроса.
            
            Формат ответа: JSON
                {
                  "reply": "Я с радостью Вас сориентирую, но мне также нужно понимать, в каком городе Вы планируете получение и к какой дате. ",
                  "city": None,
                  "date": None
                }
                
                Правила:
                - city = город клиента 
                - date = дата клиента
            
            История переписки:
            {history}
            
            Последнее сообщение клиента:
            {message}
            """
    response = call_llm(prompt, history)

    ready_to_next = "город" in message.lower() and "срок" in message.lower()
    return {"reply": response, "ready_to_next": ready_to_next}


def handle_stage_cost(history, message: str) -> Dict:
    prompt = "Стадия 'Расчет стоимости'."
    response = call_llm(prompt, history)

    ready_to_next = "размер" in message.lower()
    return {"reply": response, "ready_to_next": ready_to_next}


def handle_stage_payment(history, message: str) -> Dict:
    prompt = "Стадия 'Отправка реквизитов'."
    response = call_llm(prompt, history)

    ready_to_next = "оплатил" in message.lower() or "перевел" in message.lower()
    return {"reply": response, "ready_to_next": ready_to_next}


def handle_stage_additional(history, message: str) -> Dict:
    prompt = "Стадия 'Предложение дополнительных услуг'."
    response = call_llm(prompt, history)

    ready_to_next = "нет" in message.lower() or "да" in message.lower()
    return {"reply": response, "ready_to_next": ready_to_next}


def handle_stage_premium(history, message: str) -> Dict:
    prompt = "Стадия 'Предложение премиум холста'."
    response = call_llm(prompt, history)

    ready_to_next = "нет" in message.lower() or "да" in message.lower()
    return {"reply": response, "ready_to_next": ready_to_next}


def handle_stage_promo(history, message: str) -> Dict:
    prompt = "Стадия 'Акция 1+1=3'."
    response = call_llm(prompt, history)

    ready_to_next = "нет" in message.lower() or "да" in message.lower()
    return {"reply": response, "ready_to_next": ready_to_next}


def handle_stage_final(history, message: str) -> Dict:
    prompt = "Стадия 'Заключительное общение'."
    response = call_llm(prompt, history)

    return {"reply": response, "ready_to_next": False}
